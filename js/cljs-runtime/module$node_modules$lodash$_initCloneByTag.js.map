{
"version":3,
"file":"module$node_modules$lodash$_initCloneByTag.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,2CAAA,CAA+D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAAA,IACxHC,iBAAmBJ,OAAA,CAAQ,8CAAR,CADqG,CAExHK,cAAgBL,OAAA,CAAQ,2CAAR,CAFwG,CAGxHM,SAAWN,OAAA,CAAQ,sCAAR,CAH6G,CAIxHO,YAAcP,OAAA,CAAQ,yCAAR,CAJ0G,CAKxHQ,SAAWR,OAAA,CAAQ,sCAAR,CAL6G,CAMxHS,YAAcT,OAAA,CAAQ,yCAAR,CAN0G;AAOxHU,gBAAkBV,OAAA,CAAQ,6CAAR,CAyEtBC,OAAAC,QAAA,CApCAS,QAAuB,CAACC,MAAD,CAASC,GAAT,CAAcC,SAAd,CAAyBC,MAAzB,CAAiC,CACtD,IAAIC,KAAOJ,MAAAK,YACX,QAAQJ,GAAR,EACE,KA5BiBK,sBA4BjB,CACE,MAAOd,iBAAA,CAAiBQ,MAAjB,CAET,MAxCUO,kBAwCV,CACA,KAxCUC,eAwCV,CACE,MAAO,KAAIJ,IAAJ,CAAS,CAACJ,MAAV,CAET,MAlCcS,mBAkCd,CACE,MAAOhB,cAAA,CAAcO,MAAd,CAAsBG,MAAtB,CAET,MApCaO,uBAoCb,CAAiB,KAnCJC,uBAmCI,CACjB,KAnCUC,oBAmCV,CAAc,KAlCHC,qBAkCG,CAAe,KAjClBC,qBAiCkB,CAC7B,KAjCWC,qBAiCX,CAAe,KAhCGC,4BAgCH,CAAsB,KA/BzBC,sBA+ByB,CAAgB,KA9BzCC,sBA8ByC,CACnD,MAAOpB,gBAAA,CAAgBE,MAAhB;AAAwBG,MAAxB,CAET,MAlDSgB,cAkDT,CACE,MAAOzB,SAAA,CAASM,MAAT,CAAiBG,MAAjB,CAAyBD,SAAzB,CAET,MApDYkB,iBAoDZ,CACA,KAlDYC,iBAkDZ,CACE,MAAO,KAAIjB,IAAJ,CAASJ,MAAT,CAET,MAvDYsB,iBAuDZ,CACE,MAAO3B,YAAA,CAAYK,MAAZ,CAET,MAzDSuB,cAyDT,CACE,MAAO3B,SAAA,CAASI,MAAT,CAAiBG,MAAjB,CAAyBD,SAAzB,CAET,MA1DYsB,iBA0DZ,CACE,MAAO3B,YAAA,CAAYG,MAAZ,CA9BX,CAFsD,CA5CoE;",
"sources":["node_modules/lodash/_initCloneByTag.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_initCloneByTag\"] = function(global,process,require,module,exports,shadow$shims) {\nvar cloneArrayBuffer = require('./_cloneArrayBuffer'),\n    cloneDataView = require('./_cloneDataView'),\n    cloneMap = require('./_cloneMap'),\n    cloneRegExp = require('./_cloneRegExp'),\n    cloneSet = require('./_cloneSet'),\n    cloneSymbol = require('./_cloneSymbol'),\n    cloneTypedArray = require('./_cloneTypedArray');\n\n/** `Object#toString` result references. */\nvar boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    symbolTag = '[object Symbol]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/**\n * Initializes an object clone based on its `toStringTag`.\n *\n * **Note:** This function only supports cloning values with tags of\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.\n *\n * @private\n * @param {Object} object The object to clone.\n * @param {string} tag The `toStringTag` of the object to clone.\n * @param {Function} cloneFunc The function to clone values.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneByTag(object, tag, cloneFunc, isDeep) {\n  var Ctor = object.constructor;\n  switch (tag) {\n    case arrayBufferTag:\n      return cloneArrayBuffer(object);\n\n    case boolTag:\n    case dateTag:\n      return new Ctor(+object);\n\n    case dataViewTag:\n      return cloneDataView(object, isDeep);\n\n    case float32Tag: case float64Tag:\n    case int8Tag: case int16Tag: case int32Tag:\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:\n      return cloneTypedArray(object, isDeep);\n\n    case mapTag:\n      return cloneMap(object, isDeep, cloneFunc);\n\n    case numberTag:\n    case stringTag:\n      return new Ctor(object);\n\n    case regexpTag:\n      return cloneRegExp(object);\n\n    case setTag:\n      return cloneSet(object, isDeep, cloneFunc);\n\n    case symbolTag:\n      return cloneSymbol(object);\n  }\n}\n\nmodule.exports = initCloneByTag;\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","cloneArrayBuffer","cloneDataView","cloneMap","cloneRegExp","cloneSet","cloneSymbol","cloneTypedArray","initCloneByTag","object","tag","cloneFunc","isDeep","Ctor","constructor","arrayBufferTag","boolTag","dateTag","dataViewTag","float32Tag","float64Tag","int8Tag","int16Tag","int32Tag","uint8Tag","uint8ClampedTag","uint16Tag","uint32Tag","mapTag","numberTag","stringTag","regexpTag","setTag","symbolTag"]
}
