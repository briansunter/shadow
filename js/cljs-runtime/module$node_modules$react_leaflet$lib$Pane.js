shadow$provide.module$node_modules$react_leaflet$lib$Pane=function(global,process,require,module,exports,shadow$shims){global=require("module$node_modules$$babel$runtime$helpers$interopRequireWildcard");process=require("module$node_modules$$babel$runtime$helpers$interopRequireDefault");exports.__esModule=!0;exports.default=void 0;var _extends2=process(require("module$node_modules$$babel$runtime$helpers$extends")),_inheritsLoose2=process(require("module$node_modules$$babel$runtime$helpers$inheritsLoose")),
_assertThisInitialized2=process(require("module$node_modules$$babel$runtime$helpers$assertThisInitialized")),_defineProperty2=process(require("module$node_modules$$babel$runtime$helpers$defineProperty")),_uniqueId2=process(require("module$node_modules$lodash$uniqueId")),_omit2=process(require("module$node_modules$lodash$omit")),_forEach2=process(require("module$node_modules$lodash$forEach")),_react=global(require("module$node_modules$react$index")),_warning=process(require("module$node_modules$warning$warning")),
_context=require("module$node_modules$react_leaflet$lib$context"),LEAFLET_PANES="tile shadow overlay map marker tooltip popup".split(" "),PANE_RE=/-*pane/gi,paneStyles={position:"absolute",top:0,right:0,bottom:0,left:0};require=function(_Component){function Pane(){for(var _this,_len=arguments.length,args=Array(_len),_key=0;_key<_len;_key++)args[_key]=arguments[_key];_this=_Component.call.apply(_Component,[this].concat(args))||this;(0,_defineProperty2.default)((0,_assertThisInitialized2.default)((0,
_assertThisInitialized2.default)(_this)),"state",{name:void 0,context:void 0});(0,_defineProperty2.default)((0,_assertThisInitialized2.default)((0,_assertThisInitialized2.default)(_this)),"setStyle",function(_temp){var _ref=void 0===_temp?_this.props:_temp;_temp=_ref.style;_ref=_ref.className;var pane=_this.getPane(_this.state.name);pane&&(_ref&&pane.classList.add(_ref),_temp&&(0,_forEach2.default)(_temp,function(value,key){pane.style[key]=value}))});return _this}(0,_inheritsLoose2.default)(Pane,
_Component);var _proto=Pane.prototype;_proto.componentDidMount=function(){this.createPane(this.props)};_proto.componentDidUpdate=function(prevProps){if(this.state.name)if(this.props.name!==prevProps.name)this.removePane(),this.createPane(this.props);else{if(prevProps.className&&this.props.className!==prevProps.className){var pane=this.getPane();null!=pane&&null!=prevProps.className&&pane.classList.remove(prevProps.className)}this.setStyle(this.props)}};_proto.componentWillUnmount=function(){this.removePane()};
_proto.createPane=function(props){var map=props.leaflet.map,name=props.name||"pane-"+(0,_uniqueId2.default)();if(null!=map&&null!=map.createPane){var isDefault=-1!==LEAFLET_PANES.indexOf(name.replace(PANE_RE,""));null==(isDefault||this.getPane(name))?map.createPane(name,this.getParentPane()):(map=isDefault?"You must use a unique name for a pane that is not a default leaflet pane ("+name+")":"A pane with this name already exists. ("+name+")",(0,_warning.default)(!1,map));this.setState({name:name,context:(0,
_extends2.default)({},props.leaflet,{pane:name})},this.setStyle)}};_proto.removePane=function(){var name=this.state.name;if(null!=name){var pane=this.getPane(name);null!=pane&&pane.remove&&pane.remove();pane=this.props.leaflet.map;null!=pane&&null!=pane._panes&&(pane._panes=(0,_omit2.default)(pane._panes,name),pane._paneRenderers=(0,_omit2.default)(pane._paneRenderers,name))}};_proto.getParentPane=function(){return this.getPane(this.props.pane||this.props.leaflet.pane)};_proto.getPane=function(name){if(null!=
name&&null!=this.props.leaflet.map)return this.props.leaflet.map.getPane(name)};_proto.render=function(){var context=this.state.context;return context?_react.default.createElement(_context.LeafletProvider,{value:context},_react.default.createElement("div",{style:paneStyles},this.props.children)):null};return Pane}(_react.Component);require=(0,_context.withLeaflet)(require);exports.default=require}
//# sourceMappingURL=module$node_modules$react_leaflet$lib$Pane.js.map
