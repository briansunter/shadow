{
"version":3,
"file":"module$node_modules$lodash$_stringToPath.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,yCAAA,CAA6D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,OAAhB,CAAwBC,MAAxB,CAA+BC,OAA/B,CAAuCC,YAAvC,CAAqD,CAAA,IAItHC,aAAe,KAJuG,CAKtHC,WAAa,kGALyG,CAQtHC,aAAe,UASfC,OAAAA,CAhBgBP,OAAAQ,CAAQ,2CAARA,CAgBD,CAAc,QAAQ,CAACC,eAAD,CAAS,CAChD,IAAIC,OAAS,EACTN,aAAAO,KAAA,CAAkBF,eAAlB,CAAJ,EACEC,MAAAE,KAAA,CAAY,EAAZ,CAEFH,gBAAAI,QAAA,CAAeR,UAAf,CAA2B,QAAQ,CAACS,KAAD,CAAQC,MAAR,CAAgBC,KAAhB,CAAuBP,MAAvB,CAA+B,CAChEC,MAAAE,KAAA,CAAYI,KAAA;AAAQP,MAAAI,QAAA,CAAeP,YAAf,CAA6B,IAA7B,CAAR,CAA8CS,MAA9C,EAAwDD,KAApE,CADgE,CAAlE,CAGA,OAAOJ,OARyC,CAA/B,CAWnBT,OAAAC,QAAA,CAAiBK,MA5ByG;",
"sources":["node_modules/lodash/_stringToPath.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_stringToPath\"] = function(global,process,require,module,exports,shadow$shims) {\nvar memoizeCapped = require('./_memoizeCapped');\n\n/** Used to match property names within property paths. */\nvar reLeadingDot = /^\\./,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\nmodule.exports = stringToPath;\n\n};"],
"names":["shadow$provide","global","process","require","module","exports","shadow$shims","reLeadingDot","rePropName","reEscapeChar","stringToPath","memoizeCapped","string","result","test","push","replace","match","number","quote"]
}
